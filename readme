                book 1.0
对于书城项目包的介绍
    1. dao 其中包含UserDao接口，BaseDao类 以及他的子包impl(也就是对于UserDao的实现类)
        BaseDao类----用于操作数据库的抽象类，其中主流的使用apache下的dbutils包，封装jdbc并且使用QueryRunner操作
              QueryRunner的相关方法
                    public <T> List<T> queryForList(Class<T> type, String sql, Object...args){}
                        用于查询返回多条数据的javaBean的方法
                    public <T> T queryForOne(Class<T> type, String sql,Object...args){}
                        查询返回一条javaBean数据的方法，返回的值为类对象
                    public Object queryForSingleValue(String sql,Object...args){}
                        查询返回一行一列的方法
                    public int update(String sql,Object...args){}
                        用于实现增删改的sql语句的方法


        UserDao接口----用于实现想要操作jdbc从而和数据库连接从而 实现增删改查等功能的类
              public User queryByUsername(String username) {}
                    根据姓名查找数据
              public int saveUser(User user) {}
                    用于向数据库中insert内容的方法
              public User queryByUsernameAndPassword(String username, String password) {
                    根据用户的姓名和密码查询数据
              .......(后续想要实现的功能还可添加)

        UserDaoImpl----作为UserDao的实现类实现dao中的方法



    2. pojo 其中包含的是User类的相关属性和一些方法(简单的Java对象，实际就是普通JavaBeans)
        作用：为了方便程序员使用数据库中的数据，其中定义的属性和数据库中定义的字段名以及其类型基本要相同
        Cart-----购物车类
            Map<Integer,CartItem> items 集合  Integer列出的就是某个商品的id，后面的CartItem就是显示该id对应的商品信息
            其中的相关项目中需要使用的方法:
                     void addItem(CartItem cartItem)::增加商品，增加后需要更新数据，总金额...
                     void deleteItem(Integer id):: 删除商品，根据对应的id，删除，因为购物车中的商品是用map集合存储的，所以可以直接使用remove(id)
                     void clear()::清除购物车中的全部商品，map中的方法clear()
                     UpdateCount(Integer id,Integer count)::修改商品的信息，其中包括数量；根据商品的id修改对应的数量
                     BigDecimal getTotalPrice() ::购物车中总金额的获取方法，不同于一般的get方法，用for循环遍历，在将对应的key(商品id)对应的总价(数量*单价)，然后在逐个相加
                      其他的geter/seter方法+构造器+toString方法...

        CartItem-----购物车中一项商品的信息，其中包括id，单价，总价数量等
                     BigDecimal getTotalPrice() ::购物车中一个商品的总金额(price * count)
                      其他的geter/seter方法+构造器+toString方法...


        OrderItem-----订单项 ，，在Order中，点击查看详情就会跳转到订单项，显示用户下单的全部信息
                id--主键编号,name--商品名称 ，数量，单价，总价等 以及订单号orderId


        order----我的订单中的订单类，包含：订单号orderId，下单时间，状态，金额，userId(属于哪个用户)等


    3. service 该包放置业务操作类，譬如用户服务类等
        作用：一般情况将该用户操作类提取一个接口，然后在service包下生成一个impl包，在impl包中才放置用户操作接口的 实现类。该用户接口实现类中调用DAO接口对数据库进行操作，而调用该实现类的方法在struts的 action中
        impl包---实现Service中相关方法的实现

        userService接口----用户登录注册等功能实现的接口层
            public void registerUser(User user);
                实现注册用户
            public User login(User user);
                实现用户的登录
            public boolean existsUsername(String username);
                用于检查用户名是否可用

        BookService接口----增删查改图书层的service接口
            public void addBook(Book book);
            public void deleteBookById(Integer id);
            public void updateBook(Book book);
            public Book queryBookById(Integer id);
            public List<Book> queryBooks();
                上述是增删查改层面
            Page<Book> page(Integer pageNo, Integer pageSize);
            Page<Book> pageByPrice(int pageNo, int pageSize, int min, int max);
                这两个是分页功能的实现

        OrderService接口----订单层面的操作
            public String createOrder(Cart cart,Integer userId);
            实现相关的impl


    4. test 包  ----用于实现相关功能的测试代码的存放类
        jdbcUtilsTest类 ----测试数据库的连接
        UserDaoTest类  ----  测试UserDao的相关功能
        UserServiceTest----测试用户操作类的相关方法
        OrderDaoTest----测试订单类的相关方法
        OrderItemDaoTest----测试订单类中的订单项的相关方法
        BookDaoTest----测试实现图书的增删查改等功能



    5. jdbcUtils包 -----获取数据库的连接以及连接关闭

        jdbcUtils类 ----用于实现数据库连接以及连接关闭的类
            一般用得比较多的是alibaba的druid数据库连接池(需要导包)
                private static DruidDataSource dataSource;
                    需要实现数据库连接池的初始化 ，一般用到的是static{...1.创建配置文件的对象，2.通过对象读取配置文件，3.从流中加载数据，4. 创建数据库连接池dataSource = (DruidDataSource) DruidDataSourceFactory.createDataSource(properties);
                public static Connection getConnection(){
                    获取数据库连接
                public static void closeConnection(Connection conn){
                    关闭连接
    6. web 包   是存放继承HttpServlet的类
        作用：它是作为来自 Web 浏览器或其他 HTTP 客户端的请求和 HTTP 服务器上的数据库或应用程序之间的中间层
            UserServlet ----是两个类的合并，LoginServlet、RegisterServlet合并而成,用于调用用户登录与注册等页面
            其中的方法是各个小的模块的Servlet程序，都通过一个doPost()方法调用
                protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
                    Servlet程序调到其他模块的总揽。通过反射实现其他方法调用
                protected void login(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
                    原登录模块的Servlet程序，现合并为方法，统一由doPost调用
                protected void register(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
                    原注册模块的Servlet程序，现合并为方法，统一由doPost调用


            BookServlet ----实现后台管理中的图书管理页面的显示
                作用：首先调用doPost方法，接受响应action，通过反射或者if..else来判断需要实现的是那个功能
                protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
                    程序调用的入口，通过它来调用其他的实现方法
                protected void add(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
                    add后台添加数据的方法，通过req.getParameter()来获取请求参数，然后将请求参数封装成Book对象，通过service调用dao，然后添加进数据库，最后通过重定向跳转回原来的页面
                protected void delete(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
                    delete方法，通过客户端返回的id，将数据从数据库中删除
                protected void update(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
                    update方法，通过动态的获取请求参数，将将要修改的数据显示在修改页面，然后将数据封装成Book对象，然后service调用dao实现修改功能，最后在重定向回原来的页面
                protected void getBook(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
                    getBook方法，他的作用就是将需要修改的数据获取下来，然后将其请求转发到修改页面，让修改页面显示需要修改的数据
                protected void list(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
                    list方法，增删改查中的查方法。通过调用service方法->dao，然后将所有的数据保存到一个list集合中，然后将这个集合保存到request作用域中
                protected void page(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
                    分页显示list集合中需要展示的数据

            ClientBookServlet -----实现前台的图书数据显示
                作用：显示出后台中添加的数据，然后将数据显示到前台列表，让用户可以看到
                protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
                    程序调用的入口，通过请求响应action，通过反射或者if...else调用不同的方法
                public void page(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
                    实现前台数据的分页显示效果
                public void pageByPrice(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
                    实现通过价格区间查询数据，然后将数据保存到request作用域中，最后请求转发，将数据显示到查询页面



            CartServlet-----显示购物车中的数据
                步骤：首先还是和之前的一样，调用doPost/doGet获取网页的请求，然后获取请求参数，action对应的equals
                protected void addItem(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
                    作用是添加物品至购物车
                protected void deleteItem(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
                    删除购物车中添加的订单
                protected void clear(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
                    清除购物车中的全部的信息
                protected void updateCount(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
                    更新购物车中添加的订单的数量

            OrderServlet-----显示我的订单中的全部数据
               作用：根据购物车中的数据，然后显示我的订单中的数据
               protected void createOrder(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
                    作用：创建订单数据
                ...










